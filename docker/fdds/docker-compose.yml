services:

  qdrant:
    image: qdrant/qdrant:v1.11.3
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    healthcheck:
      test: [ "CMD", "bash", "-c", "exec 3<>/dev/tcp/127.0.0.1/6333 && echo -e 'GET /readyz HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && grep -q 'HTTP/1.1 200' <&3" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.60
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # OTLP HTTP
      - "4317:4317" # OTLP gRPC
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      LOG_LEVEL: "info"
    volumes:
      - jaeger_data:/badger
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:14269/" ]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    restart: unless-stopped
    profiles:
      - jaeger

  ingestion:
    build:
      context: ../..
      dockerfile: docker/fdds/Dockerfile
      target: ingestion
    image: fdds-rag:ingestion
    environment:
      QDRANT_HOST: qdrant
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      OTEL_SERVICE_NAME: ingestion
    command: [ "python", "src/manage_pdfs.py", "--ingest", "/app/data/pdfs.txt" ]
    env_file: "../../${DATA_MOUNT_PATH:-./app-data}/.env"
    volumes:
      - ../../${DATA_MOUNT_PATH:-./app-data}:/app/data
      - docling_cache:/home/appuser/.cache/docling/models
    depends_on:
      qdrant:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    restart: "no"
    profiles:
      - ingestion

  fastapi:
    build:
      context: ../..
      dockerfile: docker/fdds/Dockerfile
      target: api
    image: fdds-rag:api
    env_file: "../../${DATA_MOUNT_PATH:-./app-data}/.env"
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_SERVICE_NAME: fastapi
      OTEL_TRACES_EXPORTER: otlp
      QDRANT_HOST: qdrant
    depends_on:
      qdrant:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    restart: unless-stopped

volumes:
  qdrant_data:
  jaeger_data:
  docling_cache:
